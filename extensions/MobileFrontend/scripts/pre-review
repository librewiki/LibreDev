#!/usr/bin/python
import sys
import urllib2
import subprocess
import json

def get_project():
    command = "git remote -v | head -n1 | sed -e 's/.*\(ssh:.*\)\.git.*/\\1/'"
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

    #Launch the shell command:
    output, error = process.communicate()
    return "/".join(output.strip().split('/')[-3:])

def get_last_commit():
    command = "git log -1"
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

    #Launch the shell command:
    output, error = process.communicate()
    return output

def query_gerrit(project):
    url = "https://gerrit.wikimedia.org/r/changes/?q=status:open+project:" \
        + project + "&n=25&O=1"
    req = urllib2.Request(url)
    req.add_header('Accept',
                   'application/json,application/json,application/jsonrequest')
    req.add_header('Content-Type', "application/json; charset=UTF-8")
    resp, data = urllib2.urlopen(req)
    data = json.loads(data)
    return data

changes = query_gerrit(get_project())
open_patches = 0
revised_patch = False
commit = get_last_commit()
for change in changes:
    reviews = change["labels"]["Code-Review"]

    # This patch is updating an existing one so let's allow it.
    if change["change_id"] in commit:
        revised_patch = True
    wip = 'WIP' in change['subject']
    if 'disliked' not in reviews and 'rejected' not in reviews and 'approved' not in reviews and not wip:
        open_patches += 1

if open_patches > 5 and not revised_patch:
    print 'Do some code review first! There are %s open unreviewed patches!' % open_patches
    print 'You can still send this review but note this will generate bad karma by running `git review master --no-custom-script`.'
    sys.exit(1)
